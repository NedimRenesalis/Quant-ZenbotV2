# Create a backup of the original sim.js
cp commands/sim.js commands/sim.js.bak

# Create a modified version of sim.js with debugging and timeout protection
cat > commands/sim.js << 'EOF'
var minimist = require('minimist')
  , path = require('path')
  , moment = require('moment')
  , colors = require('colors')
  , tb = require('timebucket')
  , _ = require('lodash')
  , fs = require('fs')
  , n = require('numbro')
  , debug = require('../lib/debug')
  , collectionService = require('../lib/services/collection-service')

module.exports = function (program, conf) {
  program
    .command('sim [selector]')
    .allowUnknownOption()
    .description('run a simulation on backfilled data')
    .option('--conf <path>', 'path to optional conf overrides file')
    .option('--strategy <name>', 'strategy to use', String, conf.strategy)
    .option('--order_type <type>', 'order type to use (maker/taker)', /^(maker|taker)$/i, conf.order_type)
    .option('--filename <filename>', 'filename for the result output (ex: result.html). "none" to disable', String, conf.filename)
    .option('--start <datetime>', 'start trading at this time')
    .option('--end <datetime>', 'stop trading at this time')
    .option('--days <days>', 'set duration by day count', Number, conf.days)
    .option('--currency_capital <amount>', 'amount of start capital in currency', Number, conf.currency_capital)
    .option('--asset_capital <amount>', 'amount of start capital in asset', Number, conf.asset_capital)
    .option('--avg_slippage_pct <pct>', 'avg. amount of slippage to apply to trades', Number, conf.avg_slippage_pct)
    .option('--buy_pct <pct>', 'buy with this % of currency balance', Number, conf.buy_pct)
    .option('--sell_pct <pct>', 'sell with this % of asset balance', Number, conf.sell_pct)
    .option('--markdown_buy_pct <pct>', '% to mark down buy price', Number, conf.markdown_buy_pct)
    .option('--markup_sell_pct <pct>', '% to mark up sell price', Number, conf.markup_sell_pct)
    .option('--order_adjust_time <ms>', 'adjust bid/ask on this interval to keep orders competitive', Number, conf.order_adjust_time)
    .option('--order_poll_time <ms>', 'poll order status on this interval', Number, conf.order_poll_time)
    .option('--sell_stop_pct <pct>', 'sell if price drops below this % of bought price', Number, conf.sell_stop_pct)
    .option('--buy_stop_pct <pct>', 'buy if price surges above this % of sold price', Number, conf.buy_stop_pct)
    .option('--profit_stop_enable_pct <pct>', 'enable trailing sell stop when reaching this % profit', Number, conf.profit_stop_enable_pct)
    .option('--profit_stop_pct <pct>', 'maintain a trailing stop this % below the high-water mark of profit', Number, conf.profit_stop_pct)
    .option('--max_sell_loss_pct <pct>', 'avoid selling at a loss pct under this float', Number, conf.max_sell_loss_pct)
    .option('--max_buy_loss_pct <pct>', 'avoid buying at a loss pct over this float', Number, conf.max_buy_loss_pct)
    .option('--max_slippage_pct <pct>', 'avoid selling at a slippage pct above this float', Number, conf.max_slippage_pct)
    .option('--rsi_periods <periods>', 'number of periods to calculate RSI at', Number, conf.rsi_periods)
    .option('--exact_buy_orders', 'instead of only adjusting maker buy when the price goes up, adjust it if price has changed at all')
    .option('--exact_sell_orders', 'instead of only adjusting maker sell when the price goes down, adjust it if price has changed at all')
    .option('--disable_options', 'disable printing of options')
    .option('--quarentine_time <minutes>', 'For loss trade, set quarentine time for cancel buys', Number, conf.quarentine_time)
    .option('--enable_stats', 'enable printing order stats')
    .option('--backtester_generation <generation>','creates a json file in simulations with the generation number', Number, -1)
    .option('--verbose', 'print status lines on every period')
    .option('--silent', 'only output on completion (can speed up sim)')
    .option('--timeout <seconds>', 'timeout for each period processing in seconds', Number, 10)
    .option('--debug_periods', 'output detailed info about each period', Boolean, false)
    .action(function (selector, cmd) {
      var s = { options: minimist(process.argv) }
      var so = s.options
      if (!so.quarentine_time) {
        so.quarentine_time = 0
      }

      delete so._
      if (cmd.conf) {
        var overrides = require(path.resolve(process.cwd(), cmd.conf))
        Object.keys(overrides).forEach(function (k) {
          so[k] = overrides[k]
        })
      }
      Object.keys(conf).forEach(function (k) {
        if (!_.isUndefined(cmd[k])) {
          so[k] = cmd[k]
        }
      })
      var tradesCollection = collectionService(conf).getTrades()
      var simResults = collectionService(conf).getSimResults()

      var eventBus = conf.eventBus

      if (so.start) {
        so.start = moment(so.start, 'YYYYMMDDhhmm').valueOf()
        if (so.days && !so.end) {
          so.end = tb(so.start).resize('1d').add(so.days).toMilliseconds()
        }
      }
      if (so.end) {
        so.end = moment(so.end, 'YYYYMMDDhhmm').valueOf()
        if (so.days && !so.start) {
          so.start = tb(so.end).resize('1d').subtract(so.days).toMilliseconds()
        }
      }
      if (!so.start && so.days) {
        var d = new Date()
        var d_end = new Date(d.getTime() - (so.days * 86400000))
        so.start = d_end.getTime()
      }
      so.stats = !!cmd.enable_stats
      so.show_options = !cmd.disable_options
      so.verbose = cmd.verbose
      so.selector = selector || so.selector
      
      // Debug output
      console.log('\n========== DEBUG: Available Options ==========')
      console.log('s.options keys:', Object.keys(s.options))
      console.log('so keys:', Object.keys(so))
      
      // Calculate simulation duration
      var startTime = so.start ? new Date(so.start) : null
      var endTime = so.end ? new Date(so.end) : new Date()
      var calculatedDays = startTime ? (endTime - startTime) / (24 * 60 * 60 * 1000) : so.days
      
      console.log('\n========== Calculated Simulation Duration ==========')
      console.log('Start Time:', startTime)
      console.log('End Time:', endTime)
      console.log('Calculated Days:', calculatedDays)
      console.log('==================================================\n')
      
      var engine = require('../lib/engine')(s)
      
      // Add timeout protection to onPeriod
      if (so.timeout > 0) {
        var originalOnPeriod = engine.onPeriod
        engine.onPeriod = function(s, cb) {
          if (so.debug_periods) {
            console.log('Processing period:', s.period ? s.period.time : 'initializing')
          }
          
          // Set a timeout to prevent freezing
          var timeoutId = setTimeout(function() {
            console.error('TIMEOUT: Period processing took longer than', so.timeout, 'seconds')
            console.error('Current state:', JSON.stringify({
              period: s.period ? s.period.time : null,
              signal: s.signal,
              trend: s.trend,
              balance: s.balance
            }))
            cb() // Continue despite timeout
          }, so.timeout * 1000)
          
          // Call original onPeriod with wrapped callback
          originalOnPeriod(s, function() {
            clearTimeout(timeoutId)
            cb()
          })
        }
      }
      
      function getNext () {
        var opts = {
          query: {
            selector: so.selector
          },
          sort: {time: 1},
          limit: 1000
        }
        if (so.start) {
          opts.query.time = {$gte: so.start}
        }
        if (so.end) {
          if (!opts.query.time) opts.query.time = {}
          opts.query.time.$lte = so.end
        }
        if (!so.silent) {
          console.log('query start time: ' + moment(so.start).format('YYYY-MM-DD HH:mm:ss'))
          console.log('query   end time: ' + moment(so.end).format('YYYY-MM-DD HH:mm:ss'))
        }
        
        tradesCollection.find(opts.query).sort(opts.sort).limit(opts.limit).toArray(function (err, trades) {
          if (err) throw err
          if (!trades.length) {
            console.log('no trades found! try running `zenbot backfill ' + so.selector + '` first')
            process.exit(1)
          }
          
          if (!so.silent) {
            console.log('processing ' + trades.length + ' trades')
          }
          
          engine.update(trades, true, function (err) {
            if (err) throw err
            setImmediate(getNext)
          })
        })
      }
      
      engine.writeHeader()
      getNext()
    })
}
EOF

# Run the simulation with our modified sim.js
NODE_OPTIONS="--max-old-space-size=8192" ./zenbot.sh sim --conf=stddev-minimal-strategy.js --days=0.5 --silent --timeout=5 --debug_periods
